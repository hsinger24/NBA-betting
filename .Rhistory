"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
library(nbastatR)
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801231), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
for (game in games) {
print(game)
}
games = c(21800001:21801230)
for (game in games) {
print(game)
}
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
test[[2]][[2]]
all_games = data.frame()
try_2 = data.frame(try)
try = test[[2]][[2]]
try_2 = data.frame(try)
all_games = rbind(all_games, try_2)
####Running data collection####
all_games = data.frame()
games = c(21800001:21801230)
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
all_games = rbind(all_games, df.2)
}
### Testing ###
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21800011), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
####Running data collection####
all_games = data.frame()
games = c(21800001:21801230)
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
print(game, ncol(df.2))
all_games = rbind(all_games, df.2)
}
####Running data collection####
all_games = data.frame()
games = c(21800001:21801230)
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
print(game)
print(ncol(df.2))
all_games = rbind(all_games, df.2)
}
### Testing ###
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21800019), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
####Running data collection####
all_games = data.frame()
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
print(game)
if (ncol(df.2)!=131) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
df = stats[[2]][[2]]
df.2 = data.frame(df)
}
all_games = rbind(all_games, df.2)
}
library(MASS)
library(dplyr)
library(caret)
library(reshape2)
library(fastDummies)
library(deepnet)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
View(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
# Getting test data
test_data = data[!train, ]
test_data = subset(test_data, select = -c(1,2,3,4,106))
test_target = Team1_Won[!train]
# Setting hyperparameters
set.seed(5)
ctrl = trainControl(method = 'repeatedcv', number = 10, savePrediction = 'final', classProbs = T)
##### Stacked AutoEncoder Deep Neural Network #####
# Formatting data for DNN (Training)
training_data_dnn = data.frame(training_data)
training_data_dnn$Team1_Days_Rest_Team = as.double(training_data_dnn$Team1_Days_Rest_Team)
training_data_dnn$Team1_Days_Rest_Team_Opp = as.double(training_data_dnn$Team1_Days_Rest_Team_Opp)
training_data_dnn$Team1_Days_Next.Game = as.double(training_data_dnn$Team1_Days_Next.Game)
training_data_dnn$Team1_Days_Next.Game_Opp = as.double(training_data_dnn$Team1_Days_Next.Game_Opp)
training_data_dnn$Team1_Wins = as.double(training_data_dnn$Team1_Wins)
training_data_dnn$Team1_Wins_Opp = as.double(training_data_dnn$Team1_Wins_Opp)
training_data_dnn$Team1_Losses = as.double(training_data_dnn$Team1_Losses)
training_data_dnn$Team1_Losses_Opp = as.double(training_data_dnn$Team1_Losses_Opp)
training_data_dnn$Team1_USG_PCT_Agg = as.double(training_data_dnn$Team1_USG_PCT_Agg)
training_data_dnn$Team1_USG_PCT_Agg_Opp = as.double(training_data_dnn$Team1_USG_PCT_Agg_Opp)
training_data_dnn = subset(training_data_dnn, select = -c(86,102))
training_data_dnn = dummy_cols(training_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
numerical = c()
for (i in 1:ncol(training_data_dnn)) {
if (typeof(training_data_dnn[,i])=='double') {
numerical = append(numerical, colnames(training_data_dnn)[i])
}
}
norm.values = preProcess(training_data_dnn[, numerical], method = 'range')
training_data_dnn[,numerical] = predict(norm.values, training_data_dnn[, numerical])
View(training_data_dnn)
# DNN
dnn = train(training_data_dnn,
training_target,
trControl = ctrl,
method='dnn')
# Rotation Forest
rotationForest = train(training_data,
training_target,
trControl = ctrl,
method='rotationForest')
# Rotation Forest
rotationForest = train(training_data,
training_target,
trControl = ctrl,
method='rotationForest')
# Robust SIMCA
RSimca = train(training_data,
training_target,
trControl = ctrl,
method='RSimca')
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
# Rotation Forest
rotationForest = train(training_data,
training_target,
trControl = ctrl,
method='rotationForest')
View(training_data)
training_target = factor(as.character(training_target), levels = c('0','1'), labels = c('L', 'W'))
# Rotation Forest
rotationForest = train(training_data,
training_target,
trControl = ctrl,
method='rotationForest')
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions == test_target) # 65.5%
prediction_accuracy_logistic = mean(predictions_accuracy_logistic == test_target) # 65.5%
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
prediction_accuracy_logistic
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
View(data)
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
prediction_accuracy_logistic
summary(logistic)
training_target = factor(as.character(training_target), levels = c('0','1'), labels = c('L', 'W'))
test_target = factor(as.character(test_target), levels = c('0','1'), labels = c('L', 'W'))
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
prediction_accuracy_logistic
# Rotation Forest
rotationForest = train(training_data,
training_target,
trControl = ctrl,
method='rotationForest')
# Robust SIMCA
RSimca = train(training_data,
training_target,
trControl = ctrl,
method='RSimca')
# Random Forest
forest = train(training_data,
training_target,
trControl = ctrl,
method='rf')
predictions_forest = predict(object = forest, test_data, type = 'raw')
# Oblique Random Forest
ORFlog = train(training_data,
training_target,
trControl = ctrl,
method='ORFlog ')
# Stochastic Gradient Boosting
gbm = train(training_data,
training_target,
trControl = ctrl,
method='gbm')
predictions_gbm = predict(object = gbm, test_data, type = 'raw')
prediction_accuracy_gbm= mean(predictions_gbm == test_target) # 66.3
prediction_accuracy_gbm
setwd("~/Desktop/UFC-betting")
data = read.csv('mma_data.csv')
View(data)
View(data)
results = c(0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,-1,1,1,1,1,-1,1,0,0)
data[, result] = results
data[, 'result'] = results
data = data[!(data$result==-1),]
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
library(MASS)
library(dplyr)
library(caret)
library(reshape2)
library(fastDummies)
library(deepnet)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
training_target = factor(as.character(training_target), levels = c('0','1'), labels = c('L', 'W'))
# Getting test data
test_data = data[!train, ]
# Setting hyperparameters
set.seed(5)
ctrl = trainControl(method = 'repeatedcv', number = 10, savePrediction = 'final', classProbs = T)
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
predictions_logistic
test_data = subset(test_data, select = -c(1,2,3,4,106))
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
saveRDS(logistic, 'logistic_model.rds')
# Stochastic Gradient Boosting
gbm = train(training_data,
training_target,
trControl = ctrl,
method='gbm')
saveRDS(gbm, 'gbm_model.rds')
predictions_gbm = predict(object = gbm, test_data, type = 'raw')
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
training_target = factor(as.character(training_target), levels = c('0','1'), labels = c('L', 'W'))
# Getting test data
test_data = data[!train, ]
test_data = subset(test_data, select = -c(1,2,3,4,106))
test_target = Team1_Won[!train]
test_target = factor(as.character(test_target), levels = c('0','1'), labels = c('L', 'W'))
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
prediction_accuracy_logistic
# Stochastic Gradient Boosting
gbm = train(training_data,
training_target,
trControl = ctrl,
method='gbm')
predictions_gbm = predict(object = gbm, test_data, type = 'raw')
prediction_accuracy_gbm= mean(predictions_gbm == test_target) # 66.3
prediction_accuracy_gbm
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID<21800001)
test_data = data[!train, ]
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
logistic_model = readRDS('logistic_model.rds')
View(logistic_model)
View(test_data)
# Getting odds data
odds = read.xlsx('data/odds_2018.xlsx')
library(readxl)
# Getting odds data
odds = read_excel('data/odds_2018.xlsx')
View(odds)
# Getting odds data
odds = read.csv('data/odds_2018_test.csv')
View(odds)
odds = subset(odds, select = c(-1,5,6,14,27))
odds = subset(odds, select = c(32,5,6,14,27))
View(odds)
# Getting odds data
odds = read.csv('data/odds_2018_test.csv')
View(odds)
odds = subset(odds, select = c(32,5,6,14,26))
View(odds)
colnames(odds) = c('Game_ID', 'Team1', 'Team2', 'ML1', 'ML2')
View(test_data)
test_data = test_data['Game_ID'>21800215,]
View(test_data)
test_data = test_data['Game_ID'>21800215,]
test_data = test_data['Date'>'1900-11-15',]
test_data = test_data[13228:,]
test_data = test_data[13228:]
test_data = test_data[c(13228:)]
c(13228:14242)
test_data = test_data[c(13228:14242)]
test_data = test_data[c(13228:14242),]
View(test_data)
test_data = data[!train, ]
test_data = test_data[13228:14242,]
View(test_data)
test_data = data[!train, ]
View(test_data)
test_data = test_data[160:,]
test_data = test_data[160:1214,]
View(test_data)
test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
View(test_data)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
View(data)
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
View(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID<21800001)
test_data = data[!train, ]
View(test_data)
test_data = test_data[160:1214,]
test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
predictions = ifelse(test_data$Team1_Win_Prob>0.5,1,0)
mean(predictions==test_data$Team1_Won)
predictions = ifelse(test_data$Team1_Win_Prob>0.5,'W','L')
mean(predictions==test_data$Team1_Won)
View(odds)
# Merging test_data and odds
test_merged = merge(test_data, odds, by = 'Game_ID')
View(test_merged)
write.csv(test_merged, 'test_merged.csv')
write.csv(test_merged, 'data/test_merged.csv')
