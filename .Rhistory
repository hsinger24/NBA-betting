}
# Setting working directory and imports
setwd("~/Desktop/NBA-betting")
# Setting working directory and imports
setwd("~/Desktop/NBA-betting")
years = c(2007:2018)
all_games = data.frame()
colnames(all_games) = colnames(year_df)
for (year in years) {
character_year = toString(year)
file_path = paste('data/final_stats_', character_year, '.csv', sep = '')
year_df = read.csv(file_path, header = T)
if (year == 2007) {
year_df = subset(year_df, select = -c(1,2, 211, 212))
}
else {
year_df = subset(year_df, select = -c(1, 210, 211))
}
all_games = rbind(all_games, year_df)
}
write.csv(all_games, 'data/final_dataset.csv')
data = read.csv('data/final_dataset.csv')
View(data)
data = subset(data, select = -c(1))
View(data)
View(data)
train = (Game_ID<21800001)
attach(data)
train = (Game_ID<21800001)
training_data = data[train, ]
test_data = data[!train, ]
test_target = Team1_Won[!train, ]
test_target = Team1_Won[!train]
View(test_data)
training_data = subset(training_data, select = -c(1,2,3,4))
View(training_data)
test_data = subset(test_data, select = -c(1,2,3,4))
logistic = glm(Team1_Won ~, data = training_data)
logistic = glm(Team1_Won ~., data = training_data)
summary(logistic)
training_data = na.omit(training_data)
probabilities = predict(logistic, test_data, type = 'response')
# Basic logit
logistic = glm(Team1_Won ~., data = training_data, family = binomial)
probabilities = predict(logistic, test_data, type = 'response')
predictions = rep(0, length(probabilities))
probabilities
summary(logistic)
predictions[probabilities>=0.5] = 1
sum(predictions)
table(predictions, test_target)
mean(predictions==test_target)
library(MASS)
lda = lda(Team1_Won ~., data = training_data)
View(test_data)
str(data)
library(dplyr)
View(data)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
View(data)
data = subset(data, select = -c(1, 41))
attach(data)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 141))
View(data)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
View(data)
data = subset(data, select = -c(1, 41, 142))
library(caret)
library(reshape2)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
View(data)
# Converting columns to proper forms
print(c(208:369))
data = subset(data, select = -c(1, 41, 142, 208:369))
View(data)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
ncols(data)
ncol(data)
View(data)
data = subset(data, select = -c(1, 41, 108:209))
training_target = Team1_Won[train]
library(MASS)
library(dplyr)
library(caret)
library(reshape2)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_target = Team1_Won[train]
training_data = subset(training_data, select = -c(1,2,3,4,106))
View(training_data)
training_data = na.omit(training_data)
# Basic logit
train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
# Setting hyperparameters
set.seed(5)
ctrl = trainControl(method = 'repeatedcv', number = 10, savePrediction = 'final', classProbs = T)
training_target = as.factor(training_target)
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_target = Team1_Won[train]
training_target = factor(training_target, levels = c('W', 'L'))
training_target = Team1_Won[train]
training_target = factor(as.character(training_target), levels = c('W', 'L'))
training_target
training_target = Team1_Won[train]
training_target = factor(as.character(training_target), levels = c('0','1'), labels = c('L', 'W'))
training_target
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
Team1_Won = factor(as.character(Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
View(data)
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
View(data)
# Getting training data
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_target = Team1_Won[train]
# Basic logit
train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
# Setting hyperparameters
set.seed(5)
ctrl = trainControl(method = 'repeatedcv', number = 10, savePrediction = 'final', classProbs = T)
# Basic logit
train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
# Basic logit
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
# Getting test data
test_data = data[!train, ]
test_data = subset(test_data, select = -c(1,2,3,4,106))
test_target = Team1_Won[!train]
predictions = predict(object = logistic, test_data, type = 'raw')
mean(predictions == test_target)
# Random Forest
forest = train(training_data,
training_target,
trControl = ctrl,
method='rf')
predictions_forest = predict(object = forest, test_data, type = 'raw')
prediction_accuracy_forest = mean(predictions_forest == test_target)
# Random Forest
forest = train(training_data,
training_target,
trControl = ctrl,
method='rf')
predictions_forest = predict(object = forest, test_data, type = 'raw')
prediction_accuracy_forest = mean(predictions_forest == test_target)
prediction_accuracy_forest
# XGBOOST
xg = train(training_data,
training_target,
trControl = ctrl,
method='xgbTree')
# XGBOOST
xg = train(training_data,
training_target,
trControl = ctrl,
method='xgbTree')
# XGBOOST
xg = train(training_data,
training_target,
trControl = ctrl,
method='xgbTree')
# Bagged AdaBoost
adaBag = train(training_data,
training_target,
trControl = ctrl,
method='AdaBag')
# Bagged AdaBoost
adaBag = train(training_data,
training_target,
trControl = ctrl,
method='AdaBag')
predictions_adaBag = predict(object = adaBag, test_data, type = 'raw')
prediction_accuracy_adaBag = mean(predictions_adaBag == test_target) # Runnning
prediction_accuracy_adaBag
# Bayesian Additive Regression Trees
bartMachine = train(training_data,
training_target,
trControl = ctrl,
method='bartMachine')
# Bayesian Additive Regression Trees
bartMachine = train(training_data,
training_target,
trControl = ctrl,
method='bartMachine')
# Diagonal Discriminant Analysis
dda = train(training_data,
training_target,
trControl = ctrl,
method='dda')
# C4.5-like Trees
c_trees = train(training_data,
training_target,
trControl = ctrl,
method='J48')
# C4.5-like Trees
c_trees = train(training_data,
training_target,
trControl = ctrl,
method='J48')
predictions_c_trees = predict(object = c_trees, test_data, type = 'raw')
prediction_accuracy_c_trees= mean(predictions_c_trees == test_target)
prediction_accuracy_c_trees
# Tree Augmented Naive Bayes Classifier with Attribute Weighting
awtan = train(training_data,
training_target,
trControl = ctrl,
method='awtan')
# Stabilized Nearest Neighbor Classifier
snn = train(training_data,
training_target,
trControl = ctrl,
method='snn')
# Stabilized Nearest Neighbor Classifier
snn = train(training_data,
training_target,
trControl = ctrl,
method='snn')
# Stochastic Gradient Boosting
gbm = train(training_data,
training_target,
trControl = ctrl,
method='gbm')
predictions_gbm = predict(object = gbm, test_data, type = 'raw')
prediction_accuracy_gbm= mean(predictions_gbm == test_target)
prediction_accuracy_gbm
# Stacked AutoEncoder Deep Neural Network
colnames(training_data)
print(typeof(column))
print(typeof(training_data$column))
print(column)
# Stacked AutoEncoder Deep Neural Network
for (column in colnames(training_data)) {
print(column)
}
# Stacked AutoEncoder Deep Neural Network
for (column in colnames(training_data)) {
print(typeof(data$column))
}
print(typeof(column))
# Stacked AutoEncoder Deep Neural Network
for (i in 1:ncol(training_data)) {
print(typeof(training_data[,i]))
}
View(training_data)
# Stacked AutoEncoder Deep Neural Network
# Formatting data for DNN
training_data_dnn = data.frame(training_data)
View(training_data_dnn)
# Stacked AutoEncoder Deep Neural Network
# Formatting data for DNN
training_data_dnn = data.frame(training_data)
training_data_dnn$Team1_Days_Rest_Team = as.double(training_data_dnn$Team1_Days_Rest_Team)
training_data_dnn$Team1_Days_Rest_Team_Opp = as.double(training_data_dnn$Team1_Days_Rest_Team_Opp)
training_data_dnn$Team1_Days_Next.Game = as.double(training_data_dnn$Team1_Days_Next.Game)
training_data_dnn$Team1_Days_Next.Game_Opp = as.double(training_data_dnn$Team1_Days_Next.Game_Opp)
for (i in 1:ncol(training_data_dnn)) {
print(typeof(training_data_dnn[,i]))
}
View(training_data_dnn)
training_data_dnn$Team1_Wins = as.double(training_data_dnn$Team1_Wins)
training_data_dnn$Team1_Wins_Opp = as.double(training_data_dnn$Team1_Wins_Opp)
training_data_dnn$Team1_Losses = as.double(training_data_dnn$Team1_Losses)
training_data_dnn$Team1_Losses_Opp = as.double(training_data_dnn$Team1_Losses_Opp)
for (i in 1:ncol(training_data_dnn)) {
print(typeof(training_data_dnn[,i]))
}
training_data_dnn$Team1_E_USG_PCT_Agg = as.double(training_data_dnn$Team1_E_USG_PCT_Agg)
training_data_dnn$Team1_E_USG_PCT_Agg_Opp = as.double(training_data_dnn$Team1_E_USG_PCT_Agg_Opp)
for (i in 1:ncol(training_data_dnn)) {
print(typeof(training_data_dnn[,i]))
}
training_data_dnn$Team1_USG_PCT_Agg = as.double(training_data_dnn$Team1_E_USG_PCT_Agg)
##### Stacked AutoEncoder Deep Neural Network #####
# Formatting data for DNN
training_data_dnn = data.frame(training_data)
training_data_dnn$Team1_Days_Rest_Team = as.double(training_data_dnn$Team1_Days_Rest_Team)
training_data_dnn$Team1_Days_Rest_Team_Opp = as.double(training_data_dnn$Team1_Days_Rest_Team_Opp)
training_data_dnn$Team1_Days_Next.Game = as.double(training_data_dnn$Team1_Days_Next.Game)
training_data_dnn$Team1_Days_Next.Game_Opp = as.double(training_data_dnn$Team1_Days_Next.Game_Opp)
training_data_dnn$Team1_Wins = as.double(training_data_dnn$Team1_Wins)
training_data_dnn$Team1_Wins_Opp = as.double(training_data_dnn$Team1_Wins_Opp)
training_data_dnn$Team1_Losses = as.double(training_data_dnn$Team1_Losses)
training_data_dnn$Team1_Losses_Opp = as.double(training_data_dnn$Team1_Losses_Opp)
training_data_dnn$Team1_USG_PCT_Agg = as.double(training_data_dnn$Team1_USG_PCT_Agg)
training_data_dnn$Team1_USG_PCT_Agg_Opp = as.double(training_data_dnn$Team1_USG_PCT_Agg_Opp)
for (i in 1:ncol(training_data_dnn)) {
print(typeof(training_data_dnn[,i]))
}
install.packages("fastDummies")
library(fastDummies)
for (i in 1:ncol(training_data_dnn)) {
if (typeof(training_data_dnn[,i]) == 'integer') {
print(colnames(training_data_dnn[i]))
}
}
factor_columns = c()
for (i in 1:ncol(training_data_dnn)) {
if (typeof(training_data_dnn[,i]) == 'integer') {
factor_columns = paste(factor_columns, colnames(training_data_dnn)[i])
}
}
test = dummy_cols(training_data, select_columns = factor_columns, remove_most_frequent_dummy = T,
remove_selected_columns = T)
test = dummy_cols(training_data_dnn, select_columns = factor_columns, remove_most_frequent_dummy = T,
remove_selected_columns = T)
test = dummy_cols(training_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
View(test)
training_data_dnn = dummy_cols(training_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
View(training_data_dnn)
numerical
numerical = c()
for (i in 1:ncol(training_data_dnn)) {
if (typeof(training_data_dnn[,i])=='double') {
numerical = paste(numerical, colnames(training_data_dnn)[i])
}
}
numerical
for (i in 1:ncol(training_data_dnn)) {
print(colnames(training_data_dnn)[i])
if (typeof(training_data_dnn[,i])=='double') {
numerical = paste(numerical, colnames(training_data_dnn)[i])
}
}
}
for (i in 1:ncol(training_data_dnn)) {
print(typeof(training_data_dnn[,i]))
if (typeof(training_data_dnn[,i])=='double') {
numerical = paste(numerical, colnames(training_data_dnn)[i])
}
}
norm.values = preProcess(training_data_dnn[, numerical], method = 'range')
numerical
numerical = c()
for (i in 1:ncol(training_data_dnn)) {
print(typeof(training_data_dnn[,i]))
if (typeof(training_data_dnn[,i])=='double') {
numerical = append(numerical, colnames(training_data_dnn)[i])
}
}
numerical
norm.values = preProcess(training_data_dnn[, numerical], method = 'range')
training_data_dnn = training_data_dnn[, -c('Team1_USG_PCT_Agg', 'Team1_USG_PCT_Agg_Opp')]
View(training_data_dnn)
training_data_dnn = subset(training_data_dnn, select = -c(132,144))
View(training_data_dnn)
numerical
##### Stacked AutoEncoder Deep Neural Network #####
# Formatting data for DNN
training_data_dnn = data.frame(training_data)
training_data_dnn$Team1_Days_Rest_Team = as.double(training_data_dnn$Team1_Days_Rest_Team)
training_data_dnn$Team1_Days_Rest_Team_Opp = as.double(training_data_dnn$Team1_Days_Rest_Team_Opp)
training_data_dnn$Team1_Days_Next.Game = as.double(training_data_dnn$Team1_Days_Next.Game)
training_data_dnn$Team1_Days_Next.Game_Opp = as.double(training_data_dnn$Team1_Days_Next.Game_Opp)
training_data_dnn$Team1_Wins = as.double(training_data_dnn$Team1_Wins)
training_data_dnn$Team1_Wins_Opp = as.double(training_data_dnn$Team1_Wins_Opp)
training_data_dnn$Team1_Losses = as.double(training_data_dnn$Team1_Losses)
training_data_dnn$Team1_Losses_Opp = as.double(training_data_dnn$Team1_Losses_Opp)
training_data_dnn$Team1_USG_PCT_Agg = as.double(training_data_dnn$Team1_USG_PCT_Agg)
training_data_dnn$Team1_USG_PCT_Agg_Opp = as.double(training_data_dnn$Team1_USG_PCT_Agg_Opp)
training_data_dnn = dummy_cols(training_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
numerical = c()
for (i in 1:ncol(training_data_dnn)) {
if (typeof(training_data_dnn[,i])=='double') {
numerical = append(numerical, colnames(training_data_dnn)[i])
}
}
norm.values = preProcess(training_data_dnn[, numerical], method = 'range')
##### Stacked AutoEncoder Deep Neural Network #####
# Formatting data for DNN
training_data_dnn = data.frame(training_data)
training_data_dnn$Team1_Days_Rest_Team = as.double(training_data_dnn$Team1_Days_Rest_Team)
training_data_dnn$Team1_Days_Rest_Team_Opp = as.double(training_data_dnn$Team1_Days_Rest_Team_Opp)
training_data_dnn$Team1_Days_Next.Game = as.double(training_data_dnn$Team1_Days_Next.Game)
training_data_dnn$Team1_Days_Next.Game_Opp = as.double(training_data_dnn$Team1_Days_Next.Game_Opp)
training_data_dnn$Team1_Wins = as.double(training_data_dnn$Team1_Wins)
training_data_dnn$Team1_Wins_Opp = as.double(training_data_dnn$Team1_Wins_Opp)
training_data_dnn$Team1_Losses = as.double(training_data_dnn$Team1_Losses)
training_data_dnn$Team1_Losses_Opp = as.double(training_data_dnn$Team1_Losses_Opp)
training_data_dnn$Team1_USG_PCT_Agg = as.double(training_data_dnn$Team1_USG_PCT_Agg)
training_data_dnn$Team1_USG_PCT_Agg_Opp = as.double(training_data_dnn$Team1_USG_PCT_Agg_Opp)
training_data_dnn = dummy_cols(training_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
numerical = c()
View(training_data_dnn)
##### Stacked AutoEncoder Deep Neural Network #####
# Formatting data for DNN
training_data_dnn = data.frame(training_data)
training_data_dnn$Team1_Days_Rest_Team = as.double(training_data_dnn$Team1_Days_Rest_Team)
training_data_dnn$Team1_Days_Rest_Team_Opp = as.double(training_data_dnn$Team1_Days_Rest_Team_Opp)
training_data_dnn$Team1_Days_Next.Game = as.double(training_data_dnn$Team1_Days_Next.Game)
training_data_dnn$Team1_Days_Next.Game_Opp = as.double(training_data_dnn$Team1_Days_Next.Game_Opp)
training_data_dnn$Team1_Wins = as.double(training_data_dnn$Team1_Wins)
training_data_dnn$Team1_Wins_Opp = as.double(training_data_dnn$Team1_Wins_Opp)
training_data_dnn$Team1_Losses = as.double(training_data_dnn$Team1_Losses)
training_data_dnn$Team1_Losses_Opp = as.double(training_data_dnn$Team1_Losses_Opp)
training_data_dnn$Team1_USG_PCT_Agg = as.double(training_data_dnn$Team1_USG_PCT_Agg)
training_data_dnn$Team1_USG_PCT_Agg_Opp = as.double(training_data_dnn$Team1_USG_PCT_Agg_Opp)
for (i in 1:ncol(training_data_dnn)) {
print(i, colnames(training_data_dnn))
}
for (i in 1:ncol(training_data_dnn)) {
print(i + colnames(training_data_dnn))
}
for (i in 1:ncol(training_data_dnn)) {
print(i)
print(colnames(training_data_dnn))
}
for (i in 1:ncol(training_data_dnn)) {
print(colnames(training_data_dnn))
}
training_data_dnn = subset(training_data_dnn, select = -c(86,102))
training_data_dnn = dummy_cols(training_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
numerical = c()
for (i in 1:ncol(training_data_dnn)) {
if (typeof(training_data_dnn[,i])=='double') {
numerical = append(numerical, colnames(training_data_dnn)[i])
}
}
norm.values = preProcess(training_data_dnn[, numerical], method = 'range')
training_data_dnn[,numerical] = predict(norm.values, training_data_dnn[, numerical])
View(training_data_dnn)
View(training_data_dnn)
# DNN
dnn = train(training_data_dnn,
training_target,
trControl = ctrl,
method='dnn')
predictions_dnn = predict(object = dnn, test_data, type = 'raw')
# Formatting data for DNN (Test)
test_data_dnn = data.frame(test_data)
test_data_dnn$Team1_Days_Rest_Team = as.double(test_data_dnn$Team1_Days_Rest_Team)
test_data_dnn$Team1_Days_Rest_Team_Opp = as.double(test_data_dnn$Team1_Days_Rest_Team_Opp)
test_data_dnn$Team1_Days_Next.Game = as.double(test_data_dnn$Team1_Days_Next.Game)
test_data_dnn$Team1_Days_Next.Game_Opp = as.double(test_data_dnn$Team1_Days_Next.Game_Opp)
test_data_dnn$Team1_Wins = as.double(test_data_dnn$Team1_Wins)
test_data_dnn$Team1_Wins_Opp = as.double(test_data_dnn$Team1_Wins_Opp)
test_data_dnn$Team1_Losses = as.double(test_data_dnn$Team1_Losses)
test_data_dnn$Team1_Losses_Opp = as.double(test_data_dnn$Team1_Losses_Opp)
test_data_dnn$Team1_USG_PCT_Agg = as.double(test_data_dnn$Team1_USG_PCT_Agg)
test_data_dnn$Team1_USG_PCT_Agg_Opp = as.double(test_data_dnn$Team1_USG_PCT_Agg_Opp)
print(colnames(test_data_dnn))
test_data_dnn = subset(test_data_dnn, select = -c(86,102))
test_data_dnn = dummy_cols(test_data_dnn,  remove_most_frequent_dummy = T,
remove_selected_columns = T)
numerical_test = c()
for (i in 1:ncol(test_data_dnn)) {
if (typeof(test_data_dnn[,i])=='double') {
numerical_test = append(numerical_test, colnames(test_data_dnn)[i])
}
}
norm.values = preProcess(test_data_dnn[, numerical_test], method = 'range')
test_data_dnn[,numerical_test] = predict(norm.values, test_data[, numerical_test])
View(test_data_dnn)
predictions_dnn = predict(object = dnn, test_data_dnn, type = 'raw')
predictions_dnn = nn.predict(dnn, test_data_dnn)
library(deepnet)
predictions_dnn = nn.predict(dnn, test_data_dnn)
test_data_final = cbind(test_data_dnn, test_target)
View(test_data_final)
test_data_matrix = model.matrix(test_target~., data = test_data_final)[,-1]
View(test_data_matrix)
predictions_dnn = nn.predict(dnn, test_data_matrix)
View(test_data_matrix)
lapply(test_data_matrix[, 1:10], class)
View(test_data_matrix)
predictions_dnn = nn.predict(dnn, test_data_matrix) # Not working (yet)
