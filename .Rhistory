setwd("~/Desktop/NBA-betting/Model_Build")
library(MASS)
library(dplyr)
library(caret)
library(reshape2)
library(fastDummies)
library(deepnet)
########## Importing data and splitting test and train ##########
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
View(data)
data = subset(data, select = -c(1, 41, 108:209))
View(data)
View(data)
setwd("~/Desktop/NBA-betting")
logistic_model = readRDS('logistic_model.rds')
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Getting test data
train = (Game_ID>21700001 & Game_ID<21800001)
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Getting test data
train = (Game_ID>21700001 & Game_ID<21800001)
View(data)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting/Model_Build")
logistic_model = readRDS('logistic_model.rds')
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Getting test data
train = (Game_ID>21700001 & Game_ID<21800001)
test_data = data[train, ]
test_data = test_data[160:1214,]
test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
# test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
test_data[,'Team1_Win_Prob'] = 0
# Getting odds data
odds = read.csv('data/odds_2017_test.csv')
odds = subset(odds, select = c(32,5,6,14,26))
colnames(odds) = c('Game_ID', 'Team1', 'Team2', 'ML1', 'ML2')
# Merging test_data and odds
test_merged = merge(test_data, odds, by = 'Game_ID')
write.csv(test_merged, 'data/test_merged_2017.csv')
write.csv(test_merged, 'data/test_merged_2017_nn.csv')
setwd("~/Desktop/NBA-betting/Model_Build")
logistic_model = readRDS('logistic_model.rds')
########## Importing data and getting test data ##########
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID>21700001 & Game_ID<21800001)
test_data = data[train, ]
test_data = test_data[160:1214,]
test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
test_data[,'Team1_Win_Prob'] = 0
test_target = Team1_Won[train]
test_target = test_target[160:1214]
predictions = predict(logistic_model, test_data, type = 'raw')
predictions = ifelse(predictions>0.5, 1,0)
mean(predictions==test_target)
# Getting odds data
odds = read.csv('data/odds_2017_test.csv')
odds = subset(odds, select = c(32,5,6,14,26))
colnames(odds) = c('Game_ID', 'Team1', 'Team2', 'ML1', 'ML2')
# Merging test_data and odds
test_merged = merge(test_data, odds, by = 'Game_ID')
write.csv(test_merged, 'data/test_merged_2017.csv')
# Getting test data
train = (Game_ID>21600001 & Game_ID<21700001)
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID>21700001 & Game_ID<21800001)
test_data = data[train, ]
test_data = test_data[160:1214,]
test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
# test_data[,'Team1_Win_Prob'] = 0
test_target = Team1_Won[train]
test_target = test_target[160:1214]
predictions = predict(logistic_model, test_data, type = 'raw')
predictions = ifelse(predictions>0.5, 1,0)
mean(predictions==test_target)
# Getting odds data
odds = read.csv('data/odds_2017_test.csv')
odds = subset(odds, select = c(32,5,6,14,26))
colnames(odds) = c('Game_ID', 'Team1', 'Team2', 'ML1', 'ML2')
# Merging test_data and odds
test_merged = merge(test_data, odds, by = 'Game_ID')
write.csv(test_merged, 'data/test_merged_2017.csv')
View(test_merged)
setwd("~/Desktop/NBA-betting/Model_Build")
logistic_model = readRDS('logistic_model.rds')
########## Importing data and getting test data ##########
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = f
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID>21700001 & Game_ID<21800001)
test_data = data[train, ]
test_data = test_data[160:1214,]
test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
View(test_merged)
# data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
# data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID>21800001 & Game_ID<21900001)
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
# data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID>21800001 & Game_ID<21900001)
test_data = data[train, ]
test_data = test_data[160:1214,]
View(test_data)
# test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
test_data[,'Team1_Win_Prob'] = 0
# test_target = Team1_Won[train]
# test_target = test_target[160:1214]
# predictions = predict(logistic_model, test_data, type = 'raw')
# predictions = ifelse(predictions>0.5, 1,0)
# mean(predictions==test_target)
# Getting odds data
odds = read.csv('data/odds_2017_test.csv')
# test_target = Team1_Won[train]
# test_target = test_target[160:1214]
# predictions = predict(logistic_model, test_data, type = 'raw')
# predictions = ifelse(predictions>0.5, 1,0)
# mean(predictions==test_target)
# Getting odds data
odds = read.csv('data/odds_2018_test.csv')
odds = subset(odds, select = c(32,5,6,14,26))
colnames(odds) = c('Game_ID', 'Team1', 'Team2', 'ML1', 'ML2')
# Merging test_data and odds
test_merged = merge(test_data, odds, by = 'Game_ID')
write.csv(test_merged, 'data/test_merged_2018_nn.csv')
View(test_merged)
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
# data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
# Getting test data
train = (Game_ID>21800001 & Game_ID<21900001)
test_data = data[train, ]
test_data = test_data[160:1214,]
# test_data[,'Team1_Win_Prob'] = predict(logistic_model, test_data, type = 'raw')
test_data[,'Team1_Win_Prob'] = 0
# test_target = Team1_Won[train]
# test_target = test_target[160:1214]
# predictions = predict(logistic_model, test_data, type = 'raw')
# predictions = ifelse(predictions>0.5, 1,0)
# mean(predictions==test_target)
# Getting odds data
odds = read.csv('data/odds_2018_test.csv')
odds = subset(odds, select = c(32,5,6,14,26))
colnames(odds) = c('Game_ID', 'Team1', 'Team2', 'ML1', 'ML2')
# Merging test_data and odds
test_merged = merge(test_data, odds, by = 'Game_ID')
write.csv(test_merged, 'data/test_merged_2018_nn.csv')
setwd("~/Desktop/NBA-betting")
model = readRDS('Model_Build/logistic_model.rds')
View(model)
setwd("~/Desktop/NBA-betting/Model_Build")
library(MASS)
library(dplyr)
library(caret)
library(reshape2)
library(fastDummies)
library(deepnet)
########## Importing data and splitting test and train ##########
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
# Converting binary to factors
data$Team1_Won = factor(as.character(data$Team1_Won), levels = c('0','1'), labels = c('L', 'W'))
data$Team1_is_B2B = factor(as.character(data$Team1_is_B2B), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First = factor(as.character(data$Team1_is_B2B_First), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second = factor(as.character(data$Team1_is_B2B_Second), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home = factor(as.character(data$Team1_is_Home), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Opp = factor(as.character(data$Team1_is_B2B_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_First_Opp = factor(as.character(data$Team1_is_B2B_First_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_B2B_Second_Opp = factor(as.character(data$Team1_is_B2B_Second_Opp), levels = c('0','1'), labels = c('N', 'Y'))
data$Team1_is_Home_Opp = factor(as.character(data$Team1_is_Home_Opp), levels = c('0','1'), labels = c('N', 'Y'))
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_data = subset(data, select = -c(1,2,3,4,106))
training_target = Team1_Won
training_target = factor(as.character(training_target), levels = c('0','1'), labels = c('L', 'W'))
# Getting test data
test_data = data[!train, ]
test_data = subset(test_data, select = -c(1,2,3,4,106))
test_target = Team1_Won[!train]
test_target = factor(as.character(test_target), levels = c('0','1'), labels = c('L', 'W'))
set.seed(5)
ctrl = trainControl(method = 'repeatedcv', number = 10, savePrediction = 'final', classProbs = T)
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glmStepAIC',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='adaboost',
family=binomial())
# Logistic Regression
logistic = train(training_data,
training_target,
trControl = ctrl,
method='glm',
family=binomial())
predictions_logistic = predict(object = logistic, test_data, type = 'raw')
prediction_accuracy_logistic = mean(predictions_logistic == test_target) # 65.5%
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting/Model_Build")
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
training_data = subset(training_data, select = -c(1,2,3,4,106))
train = (Game_ID<21800001)
training_data = data[train, ]
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_data = subset(data, select = -c(1,2,3,4,106))
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
model = readRDS('Model_Build/logistic_model.rds')
# Reading in and attaching data
all_data_today = read.csv('current_season_data/todays_stats.csv')
data = all_data_today
data = subset(data, select = -c(1, 41, 108:209))
# Getting necessary columns for prediction
inputs= subset(data, select = -c(1,2,3,4,106))
View(inputs)
View(training_data)
colnames(training_data) == colnames(inputs)
