set.seed(1)
cv.errors = matrix(NA, k, 5, dimnames = list(NULL, c(0.001, 0.01,0.1,0.2,0.5)))
shrinkage = c(0.001,0.01,0.1,0.2,0.5)
for (j in 1:k) {
for (i in shrinkage) {
boost = gbm(target~., data2[folds!=j,], distribution = 'gaussian', n.trees = 5000,  shrinkage = i, verbose = F)
predictions_boost = predict(boost, data2[folds==j,])
cv.errors[j,toString(i)] = mean((predictions_boost-data2$target[folds==j])^2)
}
}
k = 10
set.seed(1)
folds = sample(1:k, nrow(data2), replace = T)
set.seed(1)
cv.errors = matrix(NA, k, 5, dimnames = list(NULL, c(0.001, 0.01,0.1,0.2,0.5)))
shrinkage = c(0.001,0.01,0.1,0.2,0.5)
for (j in 1:k) {
for (i in shrinkage) {
boost = gbm(target~., data2[folds!=j,], distribution = 'gaussian', n.trees = 5000,  shrinkage = i, verbose = F)
predictions_boost = predict(boost, data2[folds==j,])
cv.errors[j,toString(i)] = mean((predictions_boost-data2$target[folds==j])^2)
}
}
mean.cv.errors = apply(cv.errors,2,mean)
mean.cv.errors
march.8 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.8) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = neuralnet(target~., data = data2, hidden = 2, threshold = 0.5)
#model = gbm(target~., data2, distribution = 'gaussian', n.trees = 5000,  shrinkage = .001, verbose = F)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1293,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.8[k,'Stock'] = i
march.8[k, 'Mean'] = mean(storage)
march.8[k, 'SD'] = sd(storage)
march.8[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
march.8 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.8) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = randomForest(target~., data = data2,  mtry = 45)
#model = gbm(target~., data2, distribution = 'gaussian', n.trees = 5000,  shrinkage = .001, verbose = F)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1293,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.8[k,'Stock'] = i
march.8[k, 'Mean'] = mean(storage)
march.8[k, 'SD'] = sd(storage)
march.8[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
View(march.8)
march.9 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.9) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = gbm(target~., data2, distribution = 'gaussian', n.trees = 5000,  shrinkage = .001, verbose = F)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1294,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.9[k,'Stock'] = i
march.9[k, 'Mean'] = mean(storage)
march.9[k, 'SD'] = sd(storage)
march.9[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
march.9 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.9) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = randomForest(target~., data = data2,  mtry = 45)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1294,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.9[k,'Stock'] = i
march.9[k, 'Mean'] = mean(storage)
march.9[k, 'SD'] = sd(storage)
march.9[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
View(march.9)
march.10 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.10) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = randomForest(target~., data = data2,  mtry = 45)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1295,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.10[k,'Stock'] = i
march.10[k, 'Mean'] = mean(storage)
march.10[k, 'SD'] = sd(storage)
march.10[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
View(march.10)
View(march.9)
march.11 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.11) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = randomForest(target~., data = data2,  mtry = 45)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1296,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.11[k,'Stock'] = i
march.11[k, 'Mean'] = mean(storage)
march.11[k, 'SD'] = sd(storage)
march.11[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
View(march.11)
View(march.10)
march.12 = data.frame(matrix(nrow = 33, ncol = 4))
colnames(march.12) = c('Stock', 'Mean', 'SD', 'Sharpe')
k = 1
for (i in portfolio_stocks) {
data2$target = replace_na(data.full[,i], median(data.full[,i], na.rm = T))[-1]
model = randomForest(target~., data = data2,  mtry = 45)
storage = c()
for (j in 1:20) {
set.seed(j)
subset.new = data2[1297,] + data.frame(matrix(rnorm(46),nrow = 1, ncol = 46))
prediction = predict(model, subset.new)
storage = append(storage, prediction)
}
march.12[k,'Stock'] = i
march.12[k, 'Mean'] = mean(storage)
march.12[k, 'SD'] = sd(storage)
march.12[k, 'Sharpe'] = mean(storage)/sd(storage)
k = k+1
}
View(march.12)
install.packages("nbastatR")
devtools::install_github("abresler/nbastatR")
install.packages("devtools")
devtools::install_github("abresler/nbastatR")
library(nbastatR)
devtools::install_github("abresler/nbastatR")
force = TRUE
devtools::install_github("abresler/nbastatR")
'force = TRUE'
remove.packages('nbastatR')
devtools::install_github("abresler/nbastatR")
library(nbastatR)
remove.packages('nbastatR')
devtools::install_github("abresler/nbastatR")
load(dplyr)
library(dplyr)
library(nbastatR)
.rs.restartR()
library(nbastatR)
library(nbastatR)
test = get_games_box_score(game_ids = c(21700002, 21700003), box_score_types = c("Traditional", "Advanced", "Scoring", "Misc", "Usage", "Four Factors", 'hustle' "Tracking"), result_types = c('team'), join_data = TRUE, assign_to_environment = TRUE, return_message = TRUE)
get_games_box_score(game_ids = c(21700002, 21700003), box_score_types = c("Traditional", "Advanced", "Scoring", "Misc", "Usage", "Four Factors", 'hustle' "Tracking"), result_types = c('team'), join_data = TRUE, assign_to_environment = TRUE, return_message = TRUE)
get_games_box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
print(box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE))
test = box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[1]])
View(test[[2]][[2]])
View(test[[2]][[2]])
View(test[[2]][[1]])
View(test[[2]][[1]])
test = box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
library(nbastatR)
test = box_scores(game_ids = c(21700002, 21700003), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 2170001
test = box_scores(game_ids = c(21700001), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 2170001
test = box_scores(game_ids = c(2171231), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test)
View(test)
View(test)
#First 2017 game is 2170001
test = box_scores(game_ids = c(2171230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 2170001
test = box_scores(game_ids = c(2170005), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
library(nbastatR)
#First 2017 game is 2170001
test = box_scores(game_ids = c(2170005), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 2170001
test = box_scores(game_ids = c(2170001), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 21700001
test = box_scores(game_ids = c(21700001), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 21700001
test = box_scores(game_ids = c(21701231), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 21700001
test = box_scores(game_ids = c(21700500), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
library(nbastatR)
#First 2017 game is 21700001
test = box_scores(game_ids = c(21600001), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21600050), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21600350), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21600650), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21700650), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21701200), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21701231), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
#First 2017 game is 21700001
test = box_scores(game_ids = c(21701230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001
test = box_scores(game_ids = c(21601230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001, last is 21701230
test = box_scores(game_ids = c(22000001), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21800259), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
library(nbastatR)
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801231), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
for (game in games) {
print(game)
}
games = c(21800001:21801230)
for (game in games) {
print(game)
}
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21801230), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
test[[2]][[2]]
all_games = data.frame()
try_2 = data.frame(try)
try = test[[2]][[2]]
try_2 = data.frame(try)
all_games = rbind(all_games, try_2)
####Running data collection####
all_games = data.frame()
games = c(21800001:21801230)
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
all_games = rbind(all_games, df.2)
}
### Testing ###
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21800011), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
View(test[[2]][[2]])
####Running data collection####
all_games = data.frame()
games = c(21800001:21801230)
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
print(game, ncol(df.2))
all_games = rbind(all_games, df.2)
}
####Running data collection####
all_games = data.frame()
games = c(21800001:21801230)
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
print(game)
print(ncol(df.2))
all_games = rbind(all_games, df.2)
}
### Testing ###
#First 2017 game is 21700001, last is 21701230, same for all normal years
test = box_scores(game_ids = c(21800019), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
View(test)
####Running data collection####
all_games = data.frame()
for (game in games) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
print(game)
if (ncol(df.2)!=131) {
stats = box_scores(game_ids = c(game), box_score_types = c("Traditional",
"Advanced", "Scoring", "Misc", "Usage", "Four Factors", "hustle", "tracking"),
result_types = c("player", "team"), join_data = TRUE,
assign_to_environment = TRUE, return_message = TRUE)
df = stats[[2]][[2]]
df.2 = data.frame(df)
df = stats[[2]][[2]]
df.2 = data.frame(df)
}
all_games = rbind(all_games, df.2)
}
library(dplyr)
data = read.csv('NHANES_sleep.csv')
data = read.csv('../Desktop/NHANES_sleep.csv')
data = read.csv('NHANES_sleep.csv')
data = read.csv('Desktop/NHANES_sleep.csv')
View(data)
test = data %>%
mutate(HomeOwn_Binary = ifelse(HomeOwn == 'Own', yes=='Own_Yes', no == 'OwnNo'),
isBlack == ifelse(Race_Ethnicity == 'Black', yes == 'Black_Yes', no == 'BlackNo'),
depressedAny == ifelse('Depressed' != 'None', yes == 'Depressed_Yes', no == 'Depressed_No'))
library(tidyverse)
install.packages('mosaic')
install.packages("mosaic")
install.packages('mosaic')
library(mosaic)
test = data %>%
mutate(HomeOwn_Binary = ifelse(HomeOwn == 'Own', yes=='Own_Yes', no == 'OwnNo'),
isBlack == ifelse(Race_Ethnicity == 'Black', yes == 'Black_Yes', no == 'BlackNo'),
depressedAny == ifelse('Depressed' != 'None', yes == 'Depressed_Yes', no == 'Depressed_No'))
test = data %>%
mutate(HomeOwn_Binary = ifelse(HomeOwn == 'Own', yes=='Own_Yes', no == 'OwnNo'),
isBlack = ifelse(Race_Ethnicity == 'Black', yes == 'Black_Yes', no == 'BlackNo'),
depressedAny = ifelse('Depressed' != 'None', yes == 'Depressed_Yes', no == 'Depressed_No'))
test = data %>%
mutate(HomeOwn_Binary = ifelse(HomeOwn == 'Own', yes='Own_Yes', no = 'OwnNo'),
isBlack = ifelse(Race_Ethnicity == 'Black', yes = 'Black_Yes', no = 'BlackNo'),
depressedAny = ifelse('Depressed' != 'None', yes = 'Depressed_Yes', no = 'Depressed_No'))
View(test)
install.packages("sendmailR",repos="http://cran.r-project.org")
library(sendmailR)
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting/Model_Build")
# Reading in and attaching data
data = read.csv('data/final_dataset.csv')
data = subset(data, select = -c(1, 41, 108:209))
attach(data)
training_data = subset(training_data, select = -c(1,2,3,4,106))
training_data = subset(data, select = -c(1,2,3,4,106))
########## Setting working directory and imports ##########
setwd("~/Desktop/NBA-betting")
# Reading in and attaching data
all_data_today = read.csv('current_season_data/todays_stats.csv')
data = all_data_today
data = subset(data, select = -c(1, 41, 108:209))
# Getting necessary columns for prediction
inputs= subset(data, select = -c(1,2,3,4,106))
View(inputs)
View(training_data)
